
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.23.0
 * Query Engine version: adf5e8cba3daf12d456d911d72b6e9418681b28b
 */
Prisma.prismaVersion = {
  client: "2.23.0",
  engine: "adf5e8cba3daf12d456d911d72b6e9418681b28b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.BillScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  closedAt: 'closedAt',
  status: 'status',
  discount: 'discount',
  discountReason: 'discountReason',
  value: 'value',
  valueAfterDiscount: 'valueAfterDiscount',
  wasReopen: 'wasReopen',
  registered: 'registered',
  workDayId: 'workDayId',
  tableDataId: 'tableDataId'
});

exports.Prisma.CheckDataScalarFieldEnum = makeEnum({
  id: 'id',
  checkbookId: 'checkbookId',
  compensationNumber: 'compensationNumber',
  bankNumber: 'bankNumber'
});

exports.Prisma.ClientScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  address: 'address',
  complement: 'complement',
  postCode: 'postCode',
  telephoneNumber: 'telephoneNumber',
  distanceKm: 'distanceKm',
  distanceTime: 'distanceTime',
  establishmentId: 'establishmentId'
});

exports.Prisma.EmployeeScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  employeeId: 'employeeId',
  name: 'name',
  role: 'role',
  admissionDate: 'admissionDate',
  terminationDate: 'terminationDate',
  isActive: 'isActive',
  establishmentId: 'establishmentId'
});

exports.Prisma.EstablishmentScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  lat: 'lat',
  long: 'long',
  restaurantId: 'restaurantId',
  valueInCashRegister: 'valueInCashRegister',
  maximumInCashRegister: 'maximumInCashRegister',
  incomeMaxReference: 'incomeMaxReference',
  isOpen: 'isOpen',
  totalInvoices: 'totalInvoices',
  discountReasons: 'discountReasons'
});

exports.Prisma.ExpenseScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  NFE: 'NFE',
  NFEReference: 'NFEReference',
  date: 'date',
  executionDate: 'executionDate',
  establishmentId: 'establishmentId'
});

exports.Prisma.ExpenseItemScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  quantity: 'quantity',
  value: 'value',
  details: 'details',
  productId: 'productId'
});

exports.Prisma.IncomeScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  reference: 'reference',
  value: 'value',
  type: 'type',
  workDayId: 'workDayId'
});

exports.Prisma.ItemScalarFieldEnum = makeEnum({
  id: 'id',
  itemId: 'itemId',
  name: 'name',
  price: 'price',
  priceToGo: 'priceToGo',
  employeePrice: 'employeePrice',
  category: 'category',
  canTakeToGo: 'canTakeToGo',
  isActive: 'isActive',
  hasTaxSubstitution: 'hasTaxSubstitution',
  establishmentId: 'establishmentId',
  itemNCMId: 'itemNCMId'
});

exports.Prisma.NCMScalarFieldEnum = makeEnum({
  id: 'id',
  identifier: 'identifier',
  description: 'description'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  block: 'block',
  orderId: 'orderId',
  cancelled: 'cancelled',
  cancelationJustification: 'cancelationJustification',
  wasModified: 'wasModified',
  isEmployeeOrder: 'isEmployeeOrder',
  reuse: 'reuse',
  isToGo: 'isToGo',
  toGoReference: 'toGoReference',
  workDayId: 'workDayId',
  billId: 'billId'
});

exports.Prisma.OrderItemScalarFieldEnum = makeEnum({
  id: 'id',
  quantity: 'quantity',
  orderId: 'orderId',
  employeeId: 'employeeId',
  itemId: 'itemId'
});

exports.Prisma.OrderPadScalarFieldEnum = makeEnum({
  id: 'id',
  block: 'block',
  firstOrderId: 'firstOrderId',
  lastOrderId: 'lastOrderId',
  used: 'used',
  workDayId: 'workDayId',
  employeeId: 'employeeId'
});

exports.Prisma.PaymentScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  value: 'value',
  paymentType: 'paymentType',
  paymentTypeOption: 'paymentTypeOption',
  isActive: 'isActive',
  expenseId: 'expenseId',
  checkDataId: 'checkDataId',
  billId: 'billId'
});

exports.Prisma.PermissionScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  role: 'role',
  userId: 'userId',
  establishmentId: 'establishmentId'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  category: 'category',
  supplier: 'supplier',
  brand: 'brand',
  unit: 'unit'
});

exports.Prisma.TableScalarFieldEnum = makeEnum({
  id: 'id',
  tableNumber: 'tableNumber',
  establishmentId: 'establishmentId'
});

exports.Prisma.TableDataScalarFieldEnum = makeEnum({
  id: 'id',
  totalOccupations: 'totalOccupations',
  workDayId: 'workDayId',
  tableId: 'tableId',
  waiterId: 'waiterId'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  password: 'password'
});

exports.Prisma.WorkDayScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  isCurrent: 'isCurrent',
  openDate: 'openDate',
  closeDate: 'closeDate',
  establishmentId: 'establishmentId',
  userResponsibleId: 'userResponsibleId'
});

exports.Prisma.WorkHourScalarFieldEnum = makeEnum({
  id: 'id',
  weekday: 'weekday',
  startTime: 'startTime',
  endTime: 'endTime',
  isDayOff: 'isDayOff',
  employeeId: 'employeeId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.BillStatus = makeEnum({
  PAID: 'PAID',
  OPEN: 'OPEN',
  CLOSED: 'CLOSED'
});

exports.UserRole = makeEnum({
  EDITOR: 'EDITOR',
  MODERATOR: 'MODERATOR',
  ADMIN: 'ADMIN'
});

exports.WeekDay = makeEnum({
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
});

exports.Prisma.ModelName = makeEnum({
  Bill: 'Bill',
  CheckData: 'CheckData',
  Client: 'Client',
  Employee: 'Employee',
  Establishment: 'Establishment',
  Expense: 'Expense',
  ExpenseItem: 'ExpenseItem',
  Income: 'Income',
  Item: 'Item',
  NCM: 'NCM',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderPad: 'OrderPad',
  Payment: 'Payment',
  Permission: 'Permission',
  Product: 'Product',
  Table: 'Table',
  TableData: 'TableData',
  User: 'User',
  WorkDay: 'WorkDay',
  WorkHour: 'WorkHour'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
